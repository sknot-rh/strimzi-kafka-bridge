{
    "swagger": "2.0",
    "info": {
        "title": "Strimzi HTTP Bridge for Apache Kafka",
        "description": "The Strimzi HTTP Bridge for Apache Kafka provides a REST API for integrating client applications with a Kafka cluster. You can use the API to create and manage consumers and send and receive records over HTTP rather than the native Kafka protocol. The HTTP Bridge can be deployed on bare metal or in a container.",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "email": "strimzi@redhat.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0.0"
    },
    "host": "bridge.swagger.io",
    "basePath": "/v2",
    "schemes": [
        "https",
        "http"
    ],
    "paths": {
        "/consumers/{groupid}": {
            "post": {
                "tags": [
                    "Consumers"
                ],
                "summary": "Creates a consumer instance in a given consumer group. You can optionally specify a consumer name and supported configuration options.",
                "operationId": "createConsumer",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "Name and configuration of the consumer. If a name is not specified, a randomly generated name is assigned. All parameters are optional. The supported configuration options are shown in the following example.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Consumer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/createdConsumer"
                        },
                        "examples": {}
                    },
                    "409": {
                        "description": "A consumer instance with the specified name already exists in your Kafka cluster."
                    },
                    "422": {
                        "description": "One or more consumer configuration options have invalid values. Ensure that the values of the configuration options specified in the request body are valid."
                    }
                }
            },
            "parameters": [
                {
                    "name": "groupid",
                    "in": "path",
                    "description": "ID of the consumer group in which to create the consumer.",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/consumers/{groupid}/instances/{name}": {
            "delete": {
                "tags": [
                    "Consumers"
                ],
                "summary": "Deletes a consumer instance from your Kafka cluster.",
                "operationId": "deleteConsumer",
                "responses": {
                    "204": {
                        "description": "No content."
                    },
                    "404": {
                        "description": "The specified consumer instance was not found."
                    }
                }
            },
            "parameters": [
                {
                    "name": "groupid",
                    "in": "path",
                    "description": "ID of the consumer group to which the consumer belongs.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "name",
                    "in": "path",
                    "description": "Name of the consumer that you want to delete.",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/consumers/{groupid}/instances/{name}/positions/beginning": {
            "post": {
                "tags": [
                    "Consumers"
                ],
                "summary": "Configures a subscribed consumer to seek to (and subsequently read from) the first offset in one or more given topic partitions.",
                "operationId": "seekToBeginning",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "List of topic partitions to which the consumer is subscribed. The consumer will seek to the first offset in the specified partitions.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartitionsForPositions"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content."
                    },
                    "404": {
                        "description": "The specified consumer instance was not found."
                    }
                }
            },
            "parameters": [
                {
                    "name": "groupid",
                    "in": "path",
                    "description": "ID of the consumer group to which the subscribed consumer belongs.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "name",
                    "in": "path",
                    "description": "Name of the subscribed consumer.",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/consumers/{groupid}/instances/{name}/positions/end": {
            "post": {
                "tags": [
                    "Consumers"
                ],
                "summary": "Configures a subscribed consumer to seek to (and subsequently read from) the last offset in one or more given topic partitions. This is the default behavior.",
                "operationId": "seekToEnd",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "List of topic partitions to which the consumer is subscribed. The consumer will seek to the last offset in the specified partitions.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartitionsForPositions"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content."
                    },
                    "404": {
                        "description": "The specified consumer instance was not found."
                    }
                }
            },
            "parameters": [
                {
                    "name": "groupid",
                    "in": "path",
                    "description": "ID of the consumer group to which the subscribed consumer belongs.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "name",
                    "in": "path",
                    "description": "Name of the subscribed consumer.",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/consumers/{groupid}/instances/{name}/records": {
            "get": {
                "tags": [
                    "Consumers"
                ],
                "summary": "Retrieves information about the records processed by a subscribed consumer, including message values, topics, and partitions. Uses the `subscribe` or `assign` API.",
                "operationId": "poll",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Records2"
                        },
                        "examples": {
                            "application/json": [
                                {
                                    "topic": "topic",
                                    "key": "key1",
                                    "value": {
                                        "foo": "bar"
                                    },
                                    "partition": 0,
                                    "offset": 2
                                },
                                {
                                    "topic": "topic",
                                    "key": "key2",
                                    "value": [
                                        "foo2",
                                        "bar2"
                                    ],
                                    "partition": 1,
                                    "offset": 3
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "The specified consumer instance was not found."
                    },
                    "406": {
                        "description": "The format of the consumer does not match the embedded format requested in the Accept header."
                    }
                }
            },
            "parameters": [
                {
                    "name": "groupid",
                    "in": "path",
                    "description": "ID of the consumer group to which the subscribed consumer belongs.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "name",
                    "in": "path",
                    "description": "Name of the subscribed consumer for which you want to retrieve information on processed records.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "timeout",
                    "in": "query",
                    "description": "The maximum amount of time in ms that the HTTP Bridge spends retrieving records before timing out the request.",
                    "required": false,
                    "type": "integer"
                },
                {
                    "name": "max_bytes",
                    "in": "query",
                    "description": "The maximum size, in bytes, of unencoded keys and values that will be included in the response.",
                    "required": false,
                    "type": "integer"
                }
            ]
        },
        "/consumers/{groupid}/instances/{name}/subscription": {
            "post": {
                "tags": [
                    "Consumers"
                ],
                "summary": "Subscribes a consumer to one or more topics.",
                "operationId": "subscribe",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "List of topics to which the consumer will subscribe.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Topics"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content."
                    },
                    "404": {
                        "description": "The specified consumer instance was not found."
                    },
                    "409": {
                        "description": "Subscription to topics, partitions, and pattern are mutually exclusive."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Consumers"
                ],
                "summary": "Unsubscribes a consumer from all topics.",
                "operationId": "unsubscribe",
                "responses": {
                    "204": {
                        "description": "No content."
                    },
                    "404": {
                        "description": "The specified consumer instance was not found."
                    }
                }
            },
            "parameters": [
                {
                    "name": "groupid",
                    "in": "path",
                    "description": "ID of the consumer group to which the subscribed consumer belongs.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "name",
                    "in": "path",
                    "description": "Name of the consumer that you want to unsubscribe from topics.",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/topics/{topicname}": {
            "post": {
                "tags": [
                    "Topics"
                ],
                "summary": "Sends one or more records to a given topic, optionally specifying a partition, key, or both.",
                "operationId": "send",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Records"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/OffsetsWithoutTopic"
                        },
                        "examples": {
                            "application/json": {
                                "offsets": [
                                    {
                                        "partition": 2,
                                        "offset": 0
                                    },
                                    {
                                        "partition": 1,
                                        "offset": 1
                                    },
                                    {
                                        "partition": 2,
                                        "offset": 2
                                    }
                                ]
                            }
                        }
                    },
                    "404": {
                        "description": "The specified topic was not found."
                    }
                }
            },
            "parameters": [
                {
                    "name": "topicname",
                    "in": "path",
                    "description": "Name of the topic to which you want to send records.",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/topics/{topicname}/partitions/{partitionid}": {
            "post": {
                "tags": [
                    "Topics"
                ],
                "summary": "Sends one or more records to a given topic partition, optionally specifying a key.",
                "operationId": "sendToPartition",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RecordsWithoutPartitions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Partitions"
                        },
                        "examples": {
                            "application/json": [
                                {
                                    "partition": 1,
                                    "leader": 1,
                                    "replicas": [
                                        {
                                            "broker": 1,
                                            "leader": true,
                                            "in_sync": true
                                        },
                                        {
                                            "broker": 2,
                                            "leader": false,
                                            "in_sync": true
                                        },
                                        {
                                            "broker": 3,
                                            "leader": false,
                                            "in_sync": false
                                        }
                                    ]
                                },
                                {
                                    "partition": 2,
                                    "leader": 2,
                                    "replicas": [
                                        {
                                            "broker": 1,
                                            "leader": false,
                                            "in_sync": true
                                        },
                                        {
                                            "broker": 2,
                                            "leader": true,
                                            "in_sync": true
                                        },
                                        {
                                            "broker": 3,
                                            "leader": false,
                                            "in_sync": false
                                        }
                                    ]
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "The specified topic partition was not found."
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            },
            "parameters": [
                {
                    "name": "topicname",
                    "in": "path",
                    "description": "Name of the topic containing the partition to which you want to send records.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "partitionid",
                    "in": "path",
                    "description": "ID of the partition to which you want to send records.",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/consumers/{groupid}/instances/{name}/positions": {
            "post": {
                "tags": [
                    "Consumers"
                ],
                "summary": "Configures a subscribed consumer to fetch offsets from a particular offset ID the next time it fetches a set of records from a given topic partition. This overrides the default fetch behavior for consumers. You can specify one or more topic partitions.",
                "operationId": "seek",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "List of partition offsets from which the subscribed consumer will next fetch records.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Offsets"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content."
                    },
                    "404": {
                        "description": "The specified consumer instance was not found."
                    }
                }
            },
            "parameters": [
                {
                    "name": "groupid",
                    "in": "path",
                    "description": "ID of the consumer group to which the consumer belongs.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "name",
                    "in": "path",
                    "description": "Name of the subscribed consumer.",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/consumers/{groupid}/instances/{name}/offsets": {
            "post": {
                "tags": [
                    "Consumers"
                ],
                "summary": "Commits a list of consumer offsets to the consumer offsets commit log. To commit offsets for all records fetched by the consumer, leave the request body empty.",
                "operationId": "commit",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "List of consumer offsets to commit to the consumer offsets commit log. You can specify one or more topic partitions to commit offsets for.",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Offsets"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "The specified consumer instance was not found."
                    }
                }
            },
            "parameters": [
                {
                    "name": "groupid",
                    "in": "path",
                    "description": "ID of the consumer group to which the consumer belongs.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "name",
                    "in": "path",
                    "description": "Name of the consumer.",
                    "required": true,
                    "type": "string"
                }
            ]
        },
        "/consumers/{groupid}/instances/{name}/assignments": {
            "post": {
                "tags": [
                    "Consumers"
                ],
                "summary": "Assigns one or more topic partitions to a consumer.",
                "operationId": "assign",
                "parameters": [
                    {
                        "name": "body",
                        "in": "body",
                        "description": "List of topic partitions to assign to the consumer.",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/PartitionsForPositions"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OK"
                    },
                    "404": {
                        "description": "The specified consumer instance was not found."
                    },
                    "409": {
                        "description": "Subscription to topics, partitions, and pattern are mutually exclusive."
                    }
                }
            },
            "parameters": [
                {
                    "name": "groupid",
                    "in": "path",
                    "description": "ID of the consumer group to which the consumer belongs.",
                    "required": true,
                    "type": "string"
                },
                {
                    "name": "name",
                    "in": "path",
                    "description": "Name of the consumer to which you want to assign topic partitions.",
                    "required": true,
                    "type": "string"
                }
            ]
        }
    },
    "definitions": {
        "ApiResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "format": "int32",
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "Consumer": {
            "title": "Root Type for Consumer",
            "description": "The root of the Consumer type's schema.",
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "format": {
                    "type": "string"
                },
                "auto.offset.reset": {
                    "type": "string"
                },
                "auto.commit.enable": {
                    "type": "string"
                },
                "fetch.min.bytes": {
                    "type": "string"
                },
                "consumer.request.timeout.ms": {
                    "type": "string"
                }
            },
            "example": "{\n    \"name\": \"consumer1\",\n    \"format\": \"binary\",\n    \"auto.offset.reset\": \"earliest\",\n    \"auto.commit.enable\": \"false\",\n    \"fetch.min.bytes\": \"512\",\n    \"consumer.request.timeout.ms\": \"30000\"\n}"
        },
        "Offset": {
            "title": "Offset",
            "required": [],
            "type": "object",
            "properties": {
                "partition": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "topic": {
                    "type": "string"
                }
            }
        },
        "Partition": {
            "title": "Partition",
            "type": "object",
            "properties": {
                "partition": {
                    "format": "int32",
                    "type": "integer"
                },
                "leader": {
                    "format": "int32",
                    "type": "integer"
                },
                "replicas": {
                    "type": "object"
                }
            },
            "example": "{\n    \"partition\": 1,\n    \"leader\": 1,\n    \"replicas\": [\n        {\n            \"broker\": 1,\n            \"leader\": true,\n            \"in_sync\": true\n        },\n        {\n            \"broker\": 2,\n            \"leader\": false,\n            \"in_sync\": false\n        }\n    ]\n}"
        },
        "Record": {
            "title": "Record",
            "required": [
                "value"
            ],
            "type": "object",
            "properties": {
                "partition": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "topic": {
                    "type": "string"
                },
                "value": {
                    "type": "object"
                },
                "key": {
                    "type": "object"
                }
            }
        },
        "RecordsWithoutPartitions": {
            "title": "Root Type for RecordsWithoutPartitions",
            "description": "The root of the RecordsWithoutPartitions type's schema.",
            "type": "object",
            "properties": {
                "records": {
                    "$ref": "#/definitions/Records"
                }
            },
            "example": "{\n    \"records\": [\n        {\n            \"key\": \"1abcd\",\n            \"value\": \"msg1\"\n        },\n        {\n            \"value\": \"msg2\"\n        }\n    ]\n}"
        },
        "Topics": {
            "title": "Topics",
            "type": "object",
            "properties": {
                "topics": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "example": "{\n    \"topics\": [\n        \"topic1\",\n        \"topic2\"\n    ]\n}"
        },
        "Records": {
            "title": "Records",
            "type": "object",
            "properties": {
                "records": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Record"
                    }
                }
            },
            "example": "{\n    \"records\": [\n        {\n            \"key\": \"1abcd\",\n            \"value\": \"msg1\"\n        },\n        {\n            \"value\": \"msg2\",\n            \"partition\": 1\n        },\n        {\n            \"value\": \"msg3\"\n        }\n    ]\n}"
        },
        "PartitionsForPositions": {
            "title": "PartitionsForPositions",
            "type": "object",
            "properties": {
                "partitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Partition"
                    }
                }
            },
            "example": "{\n    \"partitions\": [\n        {\n            \"topic\": \"topic\",\n            \"partition\": 0\n        },\n        {\n            \"topic\": \"topic\",\n            \"partition\": 1\n        }\n    ]\n}"
        },
        "Partitions": {
            "title": "Partitions",
            "type": "object",
            "properties": {
                "partitions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Partition"
                    }
                }
            },
            "example": "{\n    \"partitions\": [\n        {\n            \"partition\": 1,\n            \"leader\": 1,\n            \"replicas\": [\n                {\n                    \"broker\": 1,\n                    \"leader\": true,\n                    \"in_sync\": true\n                },\n                {\n                    \"broker\": 2,\n                    \"leader\": false,\n                    \"in_sync\": false\n                }\n            ]\n        },\n        {\n            \"partition\": 2,\n            \"leader\": 2,\n            \"replicas\": [\n                {\n                    \"broker\": 1,\n                    \"leader\": false,\n                    \"in_sync\": true\n                },\n                {\n                    \"broker\": 2,\n                    \"leader\": true,\n                    \"in_sync\": false\n                }\n            ]\n        }\n    ]\n}"
        },
        "Offsets": {
            "title": "Offsets",
            "type": "object",
            "properties": {
                "offsets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Offset"
                    }
                }
            },
            "example": "{\n    \"offsets\": [\n        {\n            \"topic\": \"topic\",\n            \"partition\": 0,\n            \"offset\": 15\n        },\n        {\n            \"topic\": \"topic\",\n            \"partition\": 1,\n            \"offset\": 42\n        }\n    ]\n}"
        },
        "createdConsumer": {
            "title": "Root Type for createdConsumer",
            "description": "The root of the createdConsumer type's schema.",
            "type": "object",
            "properties": {
                "instance_id": {
                    "description": "Unique ID for the consumer instance in the group",
                    "type": "string"
                },
                "base_uri": {
                    "description": "Base URI used to construct URIs for subsequent requests against this consumer instance",
                    "type": "string"
                }
            },
            "example": "{\n    \"instance_id\": \"consumer1\",\n    \"base_uri\": \"http://localhost:8080/consumers/my-group/instances/consumer1\"\n}"
        },
        "OffsetsWithoutTopic": {
            "title": "Root Type for OffsetsWithoutTopic",
            "description": "The root of the OffsetsWithoutTopic type's schema.",
            "type": "object",
            "properties": {
                "offsets": {
                    "type": "array",
                    "items": {}
                }
            },
            "example": "{\n    \"offsets\": [\n        {\n            \"partition\": 2,\n            \"offset\": 0\n        },\n        {\n            \"partition\": 1,\n            \"offset\": 1\n        },\n        {\n            \"partition\": 2,\n            \"offset\": 2\n        }\n    ]\n}"
        },
        "Records2": {
            "title": "Root Type for Records2",
            "description": "The root of the Records2 type's schema.",
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "topic": {
                        "type": "string"
                    },
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "object",
                        "properties": {
                            "foo": {
                                "type": "string"
                            }
                        }
                    },
                    "partition": {
                        "format": "int32",
                        "type": "integer"
                    },
                    "offset": {
                        "format": "int32",
                        "type": "integer"
                    }
                }
            },
            "example": "[\n    {\n        \"topic\": \"topic\",\n        \"key\": \"key1\",\n        \"value\": {\n            \"foo\": \"bar\"\n        },\n        \"partition\": 0,\n        \"offset\": 2\n    },\n    {\n        \"topic\": \"topic\",\n        \"key\": \"key2\",\n        \"value\": [\n            \"foo2\",\n            \"bar2\"\n        ],\n        \"partition\": 1,\n        \"offset\": 3\n    }\n]"
        }
    },
    "tags": [
        {
            "name": "Consumers",
            "description": "The `consumers` resource allows you to create consumers in your Kafka cluster and perform common actions, such as subscribing to topics, retrieving processed records, and committing offsets."
        },
        {
            "name": "Topics",
            "description": "The `topics` resource allows you to send messages to a specified topic or topic partition. You can include message keys in requests."
        }
    ],
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    }
}
